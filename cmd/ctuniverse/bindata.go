// Code generated by go-bindata.
// sources:
// static/index.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x57\x6d\x6f\xe3\xc6\x11\xfe\x2c\xff\x8a\x31\x9b\x46\xd4\x59\x26\x29\x5d\x7c\x08\x74\x92\x8b\xc6\x76\x03\x17\xc9\x39\xa8\xef\x10\xa4\x86\x51\xac\xc8\x95\xb8\x77\x24\x97\xe5\x2e\x2d\x13\x81\xff\x7b\x67\x76\xf9\x2a\xd9\x77\xee\x27\x72\x67\x67\x66\x67\x9f\x99\x79\x86\x5c\x1e\x5f\xde\x5c\x7c\xfc\xe3\xb7\x2b\x88\x75\x9a\x9c\x1f\x2d\xed\x63\xb4\x8c\x39\x8b\xe8\x79\x7c\x7a\x7a\x34\x1a\xf9\x3e\x5c\xc8\xbc\x2a\xc4\x36\xd6\x30\x0f\x66\xef\xe0\xdf\x2c\x8c\x59\x51\xc1\xcf\x22\xe1\xca\x6a\xfc\x7a\xfd\x11\x7e\x11\x21\xcf\x14\x37\x02\x2b\xfd\x2d\xe1\x4c\x71\x50\x9c\x83\x8e\x39\xfc\x72\x7d\x71\xf5\xe1\xf6\x0a\x36\x68\x77\x34\x3a\x3d\xa5\x33\x52\xae\x19\x90\x3b\xc5\xf5\xca\xf9\xf4\xf1\x1f\xa7\x3f\x3a\xe0\xd3\x8e\x16\x3a\xe1\xe7\xb7\x2c\xcd\x13\x0e\x72\x03\x3b\xbe\x56\x32\xfc\xc2\x35\xec\x84\x8e\x61\x2b\x13\x96\x6d\x97\xbe\x55\x43\x7d\x15\x16\x22\xd7\xa0\x8a\x70\xe5\xc4\x5a\xe7\x6a\xe1\xfb\xec\x33\x7b\xf4\xb6\x52\x6e\x31\x90\x5c\x28\x2f\x94\xa9\x91\xf9\x89\x58\x2b\xff\xf3\x7f\x4b\x5e\x54\xfe\x5b\x6f\xe6\x05\xf5\xc2\x4b\x45\xe6\x7d\x56\xce\xf9\xd2\xb7\xfe\x3a\xcf\xf8\xf6\xc0\x0a\x28\x33\xf1\xc0\x31\x5a\x58\xc1\x9f\x4f\x56\xb4\x66\x91\x5c\x7f\xe6\xa1\x56\x28\xbc\xbb\xb7\x42\xb9\xcb\x78\x51\x96\x22\x42\xd9\x16\x1f\xee\xc4\xca\x0b\x9e\x45\xbc\xd0\x22\xe5\xc5\xfb\xda\x63\x1e\x31\xcd\xfb\x12\x85\x3a\x83\x75\x2c\xf2\x50\x96\x99\xe6\x05\x7a\xfb\x95\xe9\xd8\xdb\x24\x52\x16\xae\x3b\x83\x13\xbb\x2e\x58\x16\xc9\xd4\x9d\x4c\xde\xcc\x82\x60\x52\xdb\x49\x4c\x9a\xc8\x58\xf2\xf8\x6d\xab\xb7\x41\x70\x68\x57\xfd\x9f\x76\x14\x27\xe1\x82\xd9\xa7\x9b\x2f\xea\x8b\x4f\x71\x6d\xe0\x58\x74\xa8\x90\x4c\x57\x39\x5f\xc0\x98\xac\xc6\xb4\xde\x26\x72\xcd\x92\x05\xdc\xb5\x71\x4f\xdb\x48\xee\x49\xe1\x81\x27\x32\x14\xba\x42\x95\x60\x1a\x18\xd1\xa6\xe4\x68\x31\x0b\xe8\x9d\x09\x3c\x61\x6e\x5f\x33\x4c\xf9\x02\xce\xda\xf7\xff\x74\xb6\x3f\x9a\xb3\xe3\xa2\x54\x88\xa7\x42\x5f\xb8\x1c\xfd\x09\x36\x1a\xc7\xd4\xb9\x33\xc5\x22\x2d\x44\xb6\x5d\x40\xf0\x34\x1d\xec\x27\x7c\x33\xdc\xc6\x5d\x13\xc9\x5a\x4a\xa5\x51\x40\xef\x19\x4b\x51\xd7\xa2\x44\xef\x94\xfc\xa7\xa3\x23\x80\x4d\x99\x85\x5a\xc8\x6c\xb0\x67\x00\x2b\xb8\x2e\x8b\x6c\x08\xaf\xa7\xe5\xad\xa6\x73\xdc\xb7\xef\x26\x9e\x2a\xd7\xca\xae\xe6\x06\x71\x74\x38\x6a\xfd\x59\xa4\x8d\xa7\x56\xa6\x7e\xa8\x25\x03\xe7\x2f\xe6\x12\xde\x40\xf0\x38\x33\xf9\x24\x9b\xee\xf0\xd9\x3b\x2b\xe8\x02\x98\xd1\xf9\xa3\xa7\x2e\x6c\x73\xd4\x49\xf3\x18\x9f\x8e\xbf\xb6\x40\xb3\xe7\xf6\x7a\x8f\xfd\xdb\xed\x0a\x96\xa7\x5c\x29\xb6\xe5\xae\x9c\x42\xaa\xed\xbd\xc4\x06\xdc\x54\xc3\x6a\x85\x5d\x19\xf1\x8d\xc8\x78\x54\x5f\x98\xa4\xe0\xdc\xe6\x2c\xe4\x37\xa6\x35\x9d\x61\xbc\x56\xc9\x7a\xb4\x89\x4d\xb5\xc9\xb3\xc4\x1a\xb5\xaa\x83\x00\xca\xac\x17\x82\x72\xe5\x20\x67\xae\x84\xe3\x5e\x08\xf0\xfd\xf7\x20\xbd\xa1\x6c\x02\x7f\x33\xb2\x85\x21\x0d\x72\xfd\x9d\xdb\x38\xaf\x93\xf4\x9d\x3b\xfe\x4b\xdb\x1e\x63\xcc\x3d\x7f\xd4\x6e\x2b\x40\x48\x2c\xa7\x7e\x8c\x85\x02\x25\xd2\x32\x41\xd2\x50\xc0\x20\x93\x45\xca\x12\x24\xa1\xf0\xcb\xb6\x40\x92\x88\x20\x8f\x2b\x25\x42\x55\x13\x0b\x60\x7e\x91\x75\x4e\x2d\xf1\x58\x27\x4c\x43\x24\x36\x1b\x8e\x32\x0d\xc4\x34\xca\x68\x65\x52\x1b\xa2\x56\x58\x96\xc0\x94\x79\xb7\x4e\x14\x20\x75\x62\xe6\x91\x88\x37\x46\x8c\x6c\xec\x19\x04\x5a\x36\x43\xc0\x91\xc3\xaf\x89\xa4\x1e\x58\xe2\xda\x9d\x29\xd4\x74\x34\xea\xb1\xdc\x9e\xa6\xdd\x49\x2b\xe2\x81\x29\xcc\xcf\x02\x7b\x57\x43\x28\x96\xf0\x57\x90\xf1\x1d\xfc\xce\xd7\xb7\x66\xed\x3a\x3b\x22\x77\x07\x8b\x05\x7b\x9a\x11\x86\x5e\x8c\xcd\x87\x6b\xc7\xdf\x29\xc7\xda\x5b\x5b\x4f\x66\x32\xe7\x19\xba\xd8\x83\x7b\x14\xca\x4c\xc9\x84\x7b\x89\xdc\xba\x4e\xeb\x1b\x6e\x50\xfb\xd8\x31\x21\x77\x70\xe3\x5d\x14\xc8\xb2\x00\x8c\x94\xe1\x8b\x06\x8e\x43\xa0\xc2\x0d\xf4\x12\x11\x10\xa3\x96\xb3\xf7\x6e\xb7\x7f\x6c\x13\x17\xe9\xbb\xff\xbc\xbd\xf9\xe0\xd9\x9e\x12\x9b\xca\xed\x97\x39\xa1\x31\x99\xd8\x38\x9e\x0c\x8c\x41\xdd\x74\xfd\xbb\xd5\xda\xfd\xeb\xf1\xa6\x05\x60\xb5\x5f\xb6\xe6\xb8\x9c\x66\xad\xcb\x3d\xba\xca\xc4\x34\xb6\x69\x23\xcf\xcc\xaa\xe3\xc3\x56\x1a\x35\x13\xef\xce\xea\xdc\xa3\xdf\xd4\x86\x05\x3c\xc1\x41\x68\xb5\xba\x21\xe8\xe5\xa5\x8a\xdd\xd4\xb8\x7e\x3a\x88\x38\x4c\xa4\xe2\xcf\xa5\x03\x47\x74\xd1\xa2\xd6\xa2\x69\x01\x78\x21\x57\x17\xe4\x2b\xaa\xb3\x65\x8e\xe9\x1a\xb6\x57\x54\xcd\x11\xf4\xee\x35\x73\xe0\x2e\xa0\x8b\x04\xef\x0f\x37\x66\xc3\x8d\x6e\xf0\xba\xfd\xe5\x09\xcc\x26\xf0\x57\x38\xc3\xbc\x74\x3e\xec\x04\xb3\xae\x0d\xce\x78\x21\xd7\xb0\xac\x12\x59\xdf\xdc\x9f\x05\x66\x52\x63\x52\xd1\x93\xdb\x0e\xbc\xc9\x81\xaf\xd9\xa1\xaf\x50\xaa\x57\xf8\xaa\xac\x2f\xdb\x87\xee\x33\x10\x35\x3b\x16\x1c\xa2\x1f\x72\xaa\x72\x96\x35\xec\xb3\x57\x9e\xb6\x24\xdf\xf7\xb5\x13\xa1\x34\x6a\xd3\x97\xa3\x6b\x89\xd6\xfb\xc2\x2b\xe5\x36\x35\x33\xf1\x0a\x1e\x95\x21\xef\xda\x40\x4f\xe1\xb1\xa9\xac\x9a\x3f\xa9\x71\xc7\xcb\x44\x9c\xd3\x30\xd8\x3b\xb3\x2d\xbe\xc7\x7b\x33\x30\x96\x3e\xe9\x35\x5d\x31\x1e\xf7\xe2\xe9\x2a\xf0\x85\xf8\x3b\x85\x89\xa5\x08\x6a\xf0\xcb\x7f\xfd\xfd\xf7\xeb\x0f\x3f\xd3\x8a\x18\x27\x64\xd9\x03\xa3\xef\xb8\x48\x86\x65\x8a\xf4\xe8\xe1\x80\xb8\x4a\x38\xbd\xfe\x54\x5d\x47\xae\xa3\x68\xa8\xd4\x04\x61\x2c\x34\x7d\x5e\x59\x3b\x52\xbe\x90\x99\x39\xdc\x99\x47\x7d\x2d\xb3\x7f\x49\xf4\xb1\x22\x13\xd2\xbc\x4e\xb1\x2b\x49\xe4\x06\x53\xfc\x6e\x68\x7c\xec\x44\xa4\xe3\x76\x15\x73\xfa\x20\xa9\xdb\xc0\x8a\x94\xae\xb0\x17\x8c\x1a\x3a\xc3\x0a\x3c\x19\xe7\x8f\xe3\x43\x0d\x6b\xba\xaf\x82\x77\x36\xbc\x5e\x03\x4b\xa2\xe7\x33\x97\xb2\xbc\x4b\x9b\x68\x72\x46\x97\x11\x58\x38\x74\x69\xb7\x2b\xcc\x36\x4f\xe2\xbe\xeb\x02\x7f\x56\x17\xe5\xd7\xd4\x66\x8d\xda\x9b\x01\x00\xb4\xfe\xc1\x04\x3c\xea\xb0\x33\xa4\x75\x67\x8f\x3f\x81\x5e\x07\xbf\xa8\x33\x7b\x85\xce\xfc\x15\x3a\x6f\x49\x67\x7e\x76\x66\x2b\xaf\x1d\x0f\x69\x65\x3e\x7a\x8f\x5e\x06\x66\xc8\x0b\x87\x88\x0c\x7b\xfd\x1b\x50\x7c\x15\x89\x26\xba\x57\x40\xf1\x0a\x24\x5e\x05\x04\x15\x72\x5e\xf6\x0a\xb9\xb3\x32\x15\x1d\xb4\x40\x5d\x7d\xb8\xec\xb5\x1a\x11\xd1\x93\xe9\xc1\xfe\x7f\x96\xdf\xfc\x78\xae\x65\x54\xe1\x13\xff\x44\xe7\xe7\x7f\xd0\xd8\xbd\xa1\xcf\x20\xf8\xf4\xe9\xfa\x72\x81\x5a\x73\xb3\x47\x44\x05\x22\x5a\x39\xed\x37\x92\xf9\x6b\x43\xe9\xc0\xf4\x16\xf1\x7d\xc6\xa8\xa1\xba\xd6\x66\xb9\x2e\xfc\xc6\xf0\x8a\x86\xbb\xcc\x38\x5c\xe1\x7c\x1b\x2b\xe3\x43\x75\x4e\xca\x84\x5c\x8c\x5b\xfe\x43\x17\x65\xd2\xd8\xfe\xc4\x22\xdb\x4e\x87\x06\x3d\x82\x1a\x98\x5c\x18\xd0\x3a\xf5\x9a\x83\x4c\x98\x86\x6c\xc0\x94\xc1\xca\xc1\x6f\x23\x07\x6c\x57\xdb\x05\xba\xb1\xca\x06\x3e\x0b\x1b\xba\x31\xff\xf1\xff\x0b\x00\x00\xff\xff\x99\x24\x03\x31\xdf\x0f\x00\x00")

func staticIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_staticIndexHtml,
		"static/index.html",
	)
}

func staticIndexHtml() (*asset, error) {
	bytes, err := staticIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/index.html", size: 4063, mode: os.FileMode(420), modTime: time.Unix(1471321037, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/index.html": staticIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{staticIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
